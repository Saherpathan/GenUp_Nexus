from flask import Flask, jsonify, request
from flask_cors import CORS
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
import google.generativeai as genai
import urllib.parse
from models import UserSchema
from flask_bcrypt import Bcrypt
from flask_jwt_extended import JWTManager, create_access_token
from middleware.authUser import auth_user
from datetime import timedelta 
from controllers.demo import get_initial_data

from dotenv import load_dotenv
import os

load_dotenv()

app = Flask(__name__)



bcrypt = Bcrypt(app)
jwt = JWTManager(app)

app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET')

# MongoDB configuration
username = urllib.parse.quote_plus(os.getenv('MONGO_USERNAME'))
password = urllib.parse.quote_plus(os.getenv('MONGO_PASSWORD'))
restUri = os.getenv('REST_URI');

uri = f'mongodb+srv://{username}:{password}{restUri}'

client = MongoClient(uri, server_api=ServerApi('1'))
db = client.GenUpNexus
users_collection = db["users3"]

# Send a ping to confirm a successful connection
try:
    client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print(e)


GOOGLE_API_KEY=os.getenv('GOOGLE_API_KEY')

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

@app.route('/')
def index():
    return "Server is Running..."

@app.route('/tree', methods=["POST", "GET"])
def tree():
    if request.method == 'POST':
        data = request.get_json()
        query = data.get('query')
        print(query)
        response = model.generate_content('''I will give you a topic and you have to generate an explanation of the topic in points in hierarchical tree structure and respond with JSON structure as follows:
        {
            "name": "Java",
            "children": [
                {
                "name": "Development Environment",
                "children": [
                    {
                    "name": "Java Source Code",
                    "value": ".java files",
                    "description": "Human-readable code written with Java syntax."
                    },
                    {
                    "name": "Java Development Kit (JDK)",
                    "children": [
                        {
                        "name": "Compiler",
                        "value": "translates to bytecode",
                        "description": "Transforms Java source code into bytecode instructions understood by the JVM."
                        },
                        {
                        "name": "Java Class Library (JCL)",
                        "value": "predefined classes and functions",
                        "description": "Provides a collection of reusable code for common functionalities."
                        }
                    ]
                    }
                ]
                },
                {
                "name": "Execution",
                "children": [
                    {
                    "name": "Java Runtime Environment (JRE)",
                    "children": [
                        {
                        "name": "Java Virtual Machine (JVM)",
                        "value": "executes bytecode",
                        "description": "Software program that interprets and executes bytecode instructions."
                        },
                        {
                        "name": "Class Loader",
                        "value": "loads bytecode into memory",
                        "description": "Loads .class files containing bytecode into JVM memory for execution."
                        }
                    ]
                    },
                    {
                    "name": "Bytecode",
                    "value": ".class files (platform-independent)",
                    "description": "Machine-independent instructions generated by the compiler, executable on any system with JVM."
                    },
                    {
                    "name": "Just-In-Time (JIT) Compilation (optional)",
                    "value": "improves performance by translating bytecode to machine code",
                    "description": "Technique that translates frequently used bytecode sections into native machine code for faster execution."
                    }
                ]
                },
                {
                "name": "Key Features",
                "children": [
                    {
                    "name": "Object-Oriented Programming",
                    "value": "uses objects and classes",
                    "description": "Programs are structured around objects that encapsulate data and behavior."
                    },
                    {
                    "name": "Platform Independent (write once, run anywhere)",
                    "value": "bytecode runs on any system with JVM",
                    "description": "Java code can be compiled once and run on any platform with a JVM installed."
                    },
                    {
                    "name": "Garbage Collection",
                    "value": "automatic memory management",
                    "description": "JVM automatically reclaims memory from unused objects, simplifying memory management for developers."
                    }
                ]
                }
            ]
            }
            Topic is: ''' + query)
        
        # print(response.text)
        return jsonify({'success': True, 'data': response.text})
        # return temp 


@app.route('/tree/demo', methods=["POST"])
def treeDemo():
    if request.method == 'POST':
        data = request.get_json()
        query = data.get('query')
        print(query)
        response = model.generate_content('''Generate a comprehensive knowledge map representing the user's query, suitable for ReactFlow visualization.

**Prompt:** {query}

**Structure:**

- Top-level node: Represent the user's query.
- Sub-nodes branching out based on the query's relevance:
    - Leverage external knowledge sources (e.g., Wikipedia, knowledge graphs, domain-specific APIs) to identify relevant sub-concepts, related entities, and potential relationships.
- Consider including different categories of sub-nodes:
    - **Concepts:** Core ideas or principles related to the query.
    - **Subfields:** Specialized areas within the main topic.
    - **Applications:** Practical uses of the concept or subfield.
    - **Tools and Technologies:** Software or platforms used to implement the concepts.
    - **Examples:** Illustrative instances or use cases.
    - **Historical Context:** Milestones or key figures in the topic's development.
    - **See Also:** Links to broader concepts or related areas for the further exploration.
    
                                          
**Content:**

- Each node should have a label describing the concept, entity, or tool.
- Optionally, include brief descriptions, definitions, or key points within the nodes or as tooltips.
- Consider using icons to visually represent different categories of nodes (e.g., light bulb for concepts, gear for tools, calendar for historical context, puzzle piece for subfields).
- there should be at least 10 or more nodes in the knowledge map.
- Also follow the n-ary tree structure for better visualization.
- Ensure the knowledge map is visually appealing, well-organized, and easy to navigate.

**Desired Format:**

- JSON structure compatible with ReactFlow:
    - nodes (list): Nodes with data (label, optional description, optional icon, optional category) and position, type(input or output).
    - edges (list): Edges connecting nodes with source and target IDs, an optional label, an optional animated.
- keep the position of nodes spaced out for better visualization.
- always keep the top-level node at the center of the visualization.
- keep atleast 2 edges "animated":true.
- always keep the first node with "style":{background:'#0FFFF0', color: 'blue'}.
- always keep the second node with "type":"custom".
                                   
**Example:** (Providing you a simplified JSON example demonstrating the structure with nodes, edges.
    {
        "nodes": [
            {
            "id": "1",
            "type": "input",
            "data": {
                "label": "MongoDB",
                "description": "A document-oriented NoSQL database."
            },
            "position": {
                "x": 250,
                "y": 0
            },
            "animated": true
            },
            "style": {
                "background": "#0FFFF0",
                "color": "blue"
            },
            {
            "id": "2",
            "type": "custom",
            "data": {
                "label": "Features",
                "description": "Key features of MongoDB."
            },
            "position": {
                "x": 100,
                "y": 100
            },
            "animated": true
            },
            {
            "id": "3",
            "type": "output",
            "data": {
                "label": "Schema-less",
                "description": "MongoDB does not require a predefined schema."
            },
            "position": {
                "x": 400,
                "y": 100
            },
            "animated": true
            },
            {
            "id": "4",
            "type": "output",
            "data": {
                "label": "Flexible Data Model",
                "description": "MongoDB allows for flexible data models, with support for nested documents and arrays."  
            },
            "position": {
                "x": 400,
                "y": 150
            },
            "animated": true
            },
            {
            "id": "5",
            "type": "output",
            "data": {
                "label": "High Performance",
                "description": "MongoDB is known for its high performance, with features like query optimization and indexing."
            },
            "position": {
                "x": 400,
                "y": 200
            },
            "animated": true
            },
            {
            "id": "6",
            "type": "output",
            "data": {
                "label": "Scalability",
                "description": "MongoDB can scale horizontally, allowing for distribution of data across multiple servers."
            },
            "position": {
                "x": 400,
                "y": 250
            },
            "animated": true
            },
            {
            "id": "7",
            "type": "output",
            "data": {
                "label": "Developer Friendly",
                "description": "MongoDB provides a variety of developer tools and interfaces, making it easy to work with."
            },
            "position": {
                "x": 400,
                "y": 300
            },
            "animated": true
            },
            {
            "id": "8",
            "type": "output",
            "data": {
                "label": "Applications",
                "description": "Use cases and applications of MongoDB."
            },
            "position": {
                "x": 100,
                "y": 200
            },
            "animated": true
            },
            {
            "id": "9",
            "type": "output",
            "data": {
                "label": "E-commerce",
                "description": "MongoDB is used for storing product catalogs, tracking orders, and managing customer data."
            },
            "position": {
                "x": 400,
                "y": 350
            },
            "animated": true
            },
            {
            "id": "10",
            "type": "output",
            "data": {
                "label": "Social Media",
                "description": "MongoDB is used for storing user profiles, posts, and connections."
            },
            "position": {
                "x": 400,
                "y": 400
            },
            "animated": true
            },
            {
            "id": "11",
            "type": "output",
            "data": {
                "label": "Mobile Applications",
                "description": "MongoDB is often used as the backend for mobile applications, providing a flexible and scalable data store."
            },
            "position": {
                "x": 400,
                "y": 450
            },
            "animated": true
            },
            {
            "id": "12",
            "type": "output",
            "data": {
                "label": "Big Data",
                "description": "MongoDB can handle large volumes of data, making it suitable for big data applications." 
            },
            "position": {
                "x": 400,
                "y": 500
            },
            "animated": true
            },
            {
            "id": "13",
            "data": {
                "label": "See Also",
                "description": "Related topics and concepts."
            },
            "position": {
                "x": 100,
                "y": 300
            },
            "animated": true
            },
            {
            "id": "14",
            "type": "output",
            "data": {
                "label": "NoSQL Databases",
                "description": "A category of databases that do not follow the traditional relational model."
            },
            "position": {
                "x": 400,
                "y": 550
            },
            "animated": true
            },
            {
            "id": "15",
            "type": "output",
            "data": {
                "label": "Data Modeling",
                "description": "The process of designing and structuring data in a database."
            },
            "position": {
                "x": 400,
                "y": 600
            },
            "animated": true
            },
            {
            "id": "16",
            "type": "output",
            "data": {
                "label": "Database Management Systems",
                "description": "Software that allows users to interact with and manage databases."
            },
            "position": {
                "x": 400,
                "y": 650
            },
            "animated": true
            }
        ],
                                          
        "edges": [
            {
            "id": "e1-2",
            "source": "1",
            "target": "2",
            "animated": false
            },
            {
            "id": "e2-3",
            "source": "2",
            "target": "3",
            "animated": false
            },
            {
            "id": "e2-4",
            "source": "2",
            "target": "4",
            "animated": false
            },
            {
            "id": "e2-5",
            "source": "2",
            "target": "5",
            "animated": false
            },
            {
            "id": "e2-6",
            "source": "2",
            "target": "6",
            "animated": false
            },
            {
            "id": "e2-7",
            "source": "2",
            "target": "7",
            "animated": false
            },
            {
            "id": "e8-9",
            "source": "8",
            "target": "9",
            "animated": false
            },
            {
            "id": "e8-10",
            "source": "8",
            "target": "10",
            "animated": false
            },
            {
            "id": "e8-11",
            "source": "8",
            "target": "11",
            "animated": false
            },
            {
            "id": "e8-12",
            "source": "8",
            "target": "12",
            "animated": false
            },
            {
            "id": "e13-14",
            "source": "13",
            "target": "14",
            "label": "Related Topic",
            "animated": true
            },
            {
            "id": "e13-15",
            "source": "13",
            "target": "15",
            "label": "Related Concept",
            "animated": true
            },
            {
            "id": "e13-16",
            "source": "13",
            "target": "16",
            "label": "Related Tool",
            "animated": true
            }
        ]
    }

            Topic is: ''' + query)
        
        # response.text(8,)
        print(response.text)
        json_data = response.text
        modified_json_data = json_data[8:-3]
        return jsonify({'success': True, 'data': modified_json_data})
        # return temp 


@app.route('/interview', methods=["POST", "GET"])
def interview():
    if request.method == 'POST':
        data = request.get_json()
        if data.get('from') == 'client':
            return "Success"
        elif data.get('from') == 'gradio':
            print(data)
            return "Success"


# User Routes
@app.route('/user/signup', methods=['POST'])
def signup():
    data = request.json
    name = data.get('name')
    email = data.get('email')
    password = data.get('password')

    if not email:
        return jsonify({"error": "Invalid email"}), 400

    existing_user = users_collection.find_one({"email": email})

    if existing_user:
        return jsonify({"message": "User already exists"}), 404

    hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

    result = users_collection.insert_one({
        "name": name,
        "email": email,
        "password": hashed_password
    })

    print(result);

    expires = timedelta(days=7)
    access_token = create_access_token(identity={"email": email, "id": str(result.inserted_id)}, expires_delta=expires)

    res = {"name": name, "email": email}
    
    return jsonify({"result": res, "token": access_token}), 201

@app.route('/user/signin', methods=['POST'])
def signin():
    data = request.json
    email = data.get('email')
    password = data.get('password')

    user = users_collection.find_one({"email": email})

    if not user:
        return jsonify({"message": "User doesn't exist"}), 404

    if not bcrypt.check_password_hash(user['password'], password):
        return jsonify({"message": "Invalid Credentials"}), 404

    expires = timedelta(days=7)
    access_token = create_access_token(identity={"email": user['email'], "id": str(user['_id'])}, expires_delta=expires)

    res = {"name": user['name'], "email": user['email']}

    return jsonify({"result": res, "token": access_token}), 200

#protected route wiht auth_user middleware
@app.route('/user/delete', methods=['POST'])
@auth_user
def delete_account():
    email = request.email
    print(email)
    try:
        result = users_collection.delete_one({"email": email})
        if result.deleted_count == 1:
            return jsonify({"result": True}), 200
        else:
            return jsonify({"result": False, "message": "User not found"}), 404
    except Exception as e:
        print(e)
        return jsonify({"message": "Something went wrong"}), 500

@app.route('/mindmap/demo', methods=['POST'])
def mindmapDemo():
    data = request.json
    print(data);
    return get_initial_data(), 200




CORS(app)

if __name__ == '__main__':
    app.run(debug=True)